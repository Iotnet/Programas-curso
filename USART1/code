#define F_CPU 8000000UL
#define BAUDRATE 9600
#define BAUD_PRESCALLER (((F_CPU / (BAUDRATE * 16UL))) - 1)

#include <avr/io.h>
#include <util/delay.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

unsigned char READ_RESULTS[]={0x68, 0x01, 0x04, 0x93};
unsigned char START_MEASUREMENTS[]={0x68, 0x01, 0x01, 0x96};
unsigned char STOP_MEASUREMENTS[]={0x68, 0x01, 0x02, 0x95};
unsigned char SET_COEFFICIENT[]={0x68, 0x02, 0x08, 0x64, 0x2A};
unsigned char READ_COEFFICIENT[]={0x68, 0x01, 0x10, 0x87};
unsigned char STOP_AUTO_SEND[]={0x68, 0x01, 0x20, 0x77};
unsigned char ENABLE_AUTO_SEND[]={0x68, 0x01, 0x40, 0x57};
	
unsigned char dummy;

char String1[]="AT$RC\n\r";
char String2[]="AT$SF=";
char String3[]="\n\r";
char strRequest[] = "AT$SF=0102030405,1\n\r";

char *stringData = "0";
volatile unsigned long int dataInt = 0;
volatile unsigned long int retDataInt = 0;

//char String_cmd[]=";  //mensaje de prueba

void USART_init(void);
unsigned char USART_receive(void);
void USART_send( unsigned char data);
void USART_init_1(void);
unsigned char USART_receive_1(void);
void USART_send_1( unsigned char data);
void USART_putstring(char* StringPtr);
void SEND_COMMAND(unsigned char cmd[], uint8_t n);
void USART_FlushRX(void);
char * readPayload(void);
unsigned long BytesToInteger(char *payloadRaw);
char* add_int(unsigned int var);

int main(void)
{
	//DDRC |= (1<<DDRC1); //declaracion de pin PC1 como salida para habilitar regulador de 3.3v
	USART_init_1();
	USART_init();
	
	//char temp_payload[20];
	
	//strcpy(temp_payload,USART_receive_1());
	SEND_COMMAND(STOP_MEASUREMENTS, 4);
	_delay_ms(1000);
	SEND_COMMAND(STOP_AUTO_SEND, 4);
	_delay_ms(5000);
	SEND_COMMAND(START_MEASUREMENTS, 4);
	_delay_ms(10000);
	
	
	//PORTC |= (1<<PORTC1); //encender regulador 3.3v
	//_delay_ms(1000);
	//USART_putstring(String1);  //envio de comando AT$RC
	//_delay_ms(200);
	/*SEND_COMMAND(READ_RESULTS, 4);
	_delay_ms(1000);
	SEND_COMMAND(START_MEASUREMENTS, 4);
	_delay_ms(1000);
	SEND_COMMAND(STOP_MEASUREMENTS, 4);
	_delay_ms(1000);
	SEND_COMMAND(SET_COEFFICIENT, 5);
	_delay_ms(1000);
	SEND_COMMAND(READ_COEFFICIENT, 4);
	_delay_ms(1000);
	SEND_COMMAND(STOP_AUTO_SEND, 4);
	_delay_ms(1000);
	SEND_COMMAND(ENABLE_AUTO_SEND, 4);
	_delay_ms(1000);*/
	//SEND_COMMAND(STOP_MEASUREMENTS, 4);
	//_delay_ms(1000);
	//USART_FlushRX();
	//SEND_COMMAND(READ_RESULTS, 4);
	//_delay_ms(1000);
	//readPayload();
	//USART_putstring(stringData);
	
	//PORTC &= ~(1<<PORTC1);	//Apagar regulador 3.3v
	while (1)
	{
		//char payload[25];
		//strcpy(payload,String2);
		USART_FlushRX();
		SEND_COMMAND(READ_RESULTS, 4);
		//_delay_ms(1000);
		readPayload();
		USART_putstring(stringData);
		//USART_putstring("\n\r");
		_delay_ms(5000);
		//retDataInt = BytesToInteger(stringData);
		//USART_putstring(add_int(retDataInt));
		//USART_putstring("\n\r");
	}
}

void USART_init(void)
{
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

unsigned char USART_receive(void)
{
	while(!(UCSR0A & (1<<RXC0)));
	return UDR0;
}

void USART_send( unsigned char data)
{
	while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = data;
}

void USART_init_1(void)
{
	UBRR1H = (uint8_t)(BAUD_PRESCALLER>>8);
	UBRR1L = (uint8_t)(BAUD_PRESCALLER);
	UCSR1B = (1<<RXEN1)|(1<<TXEN1);
	UCSR1C = (1 << UCSZ11) | (1 << UCSZ10);
}

unsigned char USART_receive_1(void)
{
	while(!(UCSR1A & (1<<RXC1)));
	return UDR1;
}

void USART_send_1( unsigned char data)
{
	while(!(UCSR1A & (1<<UDRE1)));
	UDR1 = data;
}

void USART_putstring(char* StringPtr)
{
	while(*StringPtr != 0x00){
		USART_send(*StringPtr);
	StringPtr++;}
}
void SEND_COMMAND(unsigned char cmd[], uint8_t n)
{
	for (uint8_t i=0;i<n;i++)
	{
		USART_send_1(cmd[i]);	//envio de trama por medio de Sigfox
		//_delay_ms(100);
	}
}
char * readPayload(void)
{
	char data; int i=0;
	for(i=0; i<8;i++)
	{
		data = USART_receive_1();
		stringData[i] = data;
	}
	stringData[i] = '\0';
	return stringData;
}

void USART_FlushRX(void)
{
	while( UCSR1A & (1<<RXC1) )	dummy = UDR1;
}
char* add_int(unsigned int var)
{
	char buffer[sizeof(unsigned int)*8+1];
	char temp[17];
	div_t div_result;
	strcpy(temp,String2);
	utoa(var,buffer,16);
	div_result= div(strlen(buffer),2);
	if (div_result.rem==0)
	{
		if (strlen(buffer)==2)
		{
			strcat(temp,"00");
		}
		strcat(temp,buffer);
		return(strcat(temp,String3));
	}
	else
	{
		if (strlen(buffer)==1)
		{
			strcat(temp,"000");
		}
		else if (strlen(buffer)==3)
		{
			strcat(temp,"0");
		}
		strcat(temp,buffer);
		return(strcat(temp,String3));
	}
}
unsigned long BytesToInteger(char *payloadRaw)
{
	char byteRaw[4];
	for(int i=0; i<3; i++)
	{
		byteRaw[i] = payloadRaw[i];
	}
	//strncpy(byteRaw,payloadRaw,2);  // Copy the first byte
	return dataInt = strtoul(byteRaw, NULL, 16);
}
